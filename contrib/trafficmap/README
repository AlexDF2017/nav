This directory contains the old Traffic Map that was a part of NAV
releases prior to 3.5.0.

Dependencies
============
You need to install the Tomcat Servlet container, preferably version 5
or newer.  Other than that, the Java requirements are the same as for
NAV itself.


Overview
========
The Traffic Map consists of four components.  

1. vlanPlot is a Java applet, which is served to web clients by
   Apache.

2. vPServer is a Java servlet, which runs in the Tomcat servlet
   container.  vlanPlot retrieves information about the network
   topology and load data from NAV by querying the vPServer via HTTP
   requests.

3. vprrd.py is a Python script which is used by vPServer to retrieve
   load data from RRD files produced by Cricket.

4. pyproxy is a mod_python request handler.  vlanPlot sends HTTP
   requests to Apache, which are in turn forwarded by pyproxy to the
   local Tomcat servlet container, where the vPServer webapp answers
   them.  The pyproxy handler relays the answers back to the vlanPlot
   applet.


How to build
============
Make sure you've already built and installed NAV.

To build vlanPlot:

  cd vlanPlot
  ant dist

To build vPServer:

  cd vPServer
  ant -Dcatalina.home=/path/to/tomcat/home \
      -Dnav.javalib=/usr/local/nav/lib/java dist

The paths configured for catalina.home and nav.javalib vary depending
on your OS and configuration.  For Debian, the home of the tomcat5.5
package is /usr/share/tomcat5.5/, while the Debian nav package places
the NAV java libraries in /usr/lib/nav/java/ .


How to install
==============

Create database tables
----------------------
The traffic map needs a couple of database tables to store its
graphical layout.  The SQL vlanPlot.sql takes care of creating these.
Grab the NAV user's password from db.conf and run the script like
this:

  psql -f vlanPlot.sql nav nav

The tables are created in a separate schema called vlanplot.  To make
sure the vlanplot namespace is properly visible in the nav database,
please edit the nav database's search_path parameter.  Connect to the
nav database using "psql nav nav", and check the current setting of
search_path thus:

  SHOW search_path;

If this says something like "manage, profiles, logger, arnold",
execute the following:

  ALTER DATABASE nav SET search_path = manage, profiles, logger, arnold, vlanplot;

Basically, just add "vlanplot" to the existing list of comma-separated
values.


Installing the vPServer servlet
-------------------------------
Assuming your Tomcat's webapps directory is
/var/lib/tomcat5.5/webapps:

  cp vPServer/dist/vPServer.war /var/lib/tomcat5.5/webapps/

Make sure Tomcat's security settings allow the servlet to access NAV's
configuration files and binaries.  The easiest way to do this is to
not enable its security manager at all (the "-security" startup
option).  The Debian package provides the TOMCAT_SEURITY option in
/etc/default/tomcat5.5 to modify this setting.

Now, restart Tomcat to make sure the servlet is deployed.

Then copy vPServer/vprrd.py to NAV's binaries directory, typically
/usr/local/nav/bin (or /usr/lib/nav if using the Debian package):

  cp vPServer/vprrd.py /usr/local/nav/bin/


Installing pyproxy
------------------
Assuming your NAV python libraries are in /usr/local/nav/lib/python/,
do the following:

  cp -r pyproxy /usr/local/nav/lib/python/nav/web/


Installing the vlanPlot applet
------------------------------
Assuming your NAV webroot directory is /usr/local/nav/apache/webroot/,
do this:

  TARGET=/usr/local/nav/apache/webroot/vlanPlot
  # Make target directories
  mkdir $TARGET
  mkdir $TARGET/applet
  # Copy the applet itself
  cp vlanPlot/dist/vlanPlot.jar $TARGET/applet/
  # Copy static graphics files
  cp -r vlanPlot/gfx vlanPlot/icons $TARGET
  # Set up htaccess files
  cp htaccess-main $TARGET/.htaccess
  cp htaccess-none $TARGET/applet/.htaccess
  cp htaccess-none $TARGET/gfx/.htaccess
  cp htaccess-none $TARGET/icons/.htaccess



Container editing
=================
You can change certain aspects of vlanPlot's display behavior.  You
can make show elinks with external routers, i.e. in cases where NAV
sees there is an external link from a router monitored by NAV to a
router not monitored by NAV.  This is especially useful if you only
have a single router and wish to see your link to the outside world.

If you have many routers, you can also group them into containers to
make your traffic map more easy on the eyes.

Both of these things can be accomplished using a patched version of
the seeddb tool, which adds the capability to edit traffic map
containers.

Apply the patch seeddb-trafficmap-containers.patch from this directory
to NAV and reinstall seeddb, and you should be off.  Something like
this:

  cd nav-source
  patch -p1 < contrib/trafficmap/seeddb-trafficmap-containers.patch
  cd subsystem/seeddb
  make install

Don't forget to restart Apache to make sure the changes have taken
effect.
