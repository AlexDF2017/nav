#!/usr/bin/env python
# -*- testargs: list -*-
#
# Copyright (C) 2004 Norwegian University of Science and Technology
# Copyright (C) 2006, 2011, 2016 UNINETT AS
#
# This file is part of Network Administration Visualized (NAV).
#
# NAV is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.  You should have received a copy of the GNU General Public
# License along with NAV. If not, see <http://www.gnu.org/licenses/>.
#
"""This command is your interface to start, stop and query NAV services.

Usage: nav [command] [service ...]

The selected command will be applied to all known services, unless you
specify a list of services after the command.
Available commands are:

  start   -- Start services.
  stop    -- Stop services.
  status  -- Query the status of services.
  info    -- Display information about/description of services.
  list    -- Display list of known services.

  version -- Displays which version of NAV you are running.
"""
from __future__ import print_function
import sys
import os
import os.path
import getopt
import textwrap

try:
    from nav.startstop import ServiceRegistry, CommandFailedError
except ImportError:
    print("Fatal error: Could not find the nav.startstop module.\nIs your "
          "PYTHONPATH environment correctly set up?", file=sys.stderr)
    sys.exit(1)

try:
    SERVICES = ServiceRegistry()
except OSError as _error:
    print("A problem occurred, which prevented this command from running.\n" +
          str(_error), file=sys.stderr)
    sys.exit(1)

_allow_non_root = False


def main(args):
    """Main execution point"""
    try:
        opts, args = getopt.getopt(args, '', ['nonroot'])
    except getopt.GetoptError as error:
        print(error, file=sys.stderr)
        usage()
        sys.exit(1)

    for opt, _val in opts:
        if opt == '--nonroot':
            global _allow_non_root
            _allow_non_root = True

    if len(args) == 0:
        usage()
        sys.exit(1)

    command = args.pop(0)
    if len(args) == 0:
        query_list = SERVICES.keys()
        query_list.sort()
    else:
        query_list = args

    # Use reflection to decide whether the command is known, and to
    # call it if it is.
    self = sys.modules[__name__]
    command_func_name = 'c_' + command
    if hasattr(self, command_func_name):
        command_func = getattr(self, command_func_name)
        command_func(query_list)
    else:
        print("Unknown command: " + command, file=sys.stderr)


def verify_root():
    """Verifies that a user has root privileges, if they are needed"""
    if not _allow_non_root and os.geteuid() != 0:
        print("You should be root to run this command.", file=sys.stderr)
        sys.exit(10)


def service_iterator(query_list, func):
    """Iterate through a list of service names, look up each service instance
    and call func using this instance as its argument.
    """
    unknowns = []
    for name in query_list:
        if name in SERVICES:
            func(SERVICES[name])
        else:
            unknowns.append(name)
    if len(unknowns):
        sys.stderr.write("Unknown services: %s\n" % " ".join(unknowns))


def action_iterator(query_list, action, ok_string, fail_string):
    """Iterate through a list of service names, performing an action on each
    of them.
    """
    failed = []
    unknowns = []
    errors = []

    any_ok = False
    for name in query_list:
        if name in SERVICES:
            method = getattr(SERVICES[name], action)
            try:
                if method(silent=True):
                    if not any_ok:
                        any_ok = True
                        print(ok_string + ":", end=' ')
                    print(name, end=' ')
                    sys.stdout.flush()
                else:
                    failed.append(name)
            except CommandFailedError as error:
                errors.append((name, error))
        else:
            unknowns.append(name)
    if any_ok:
        print()

    if len(failed):
        print("%s: %s" % (fail_string, " ".join(failed)))
    if len(unknowns):
        print("Unknown: %s" % " ".join(unknowns))
    if len(errors):
        print("Errors:", end=' ')
        print(" ".join(["%s (%s)" % error for error in errors]))


def c_info(query_list):
    """Lists each service and their associated description"""
    def _helper(service):
        kind = service.__class__.__name__
        if kind.endswith("Service"):
            kind = kind[:-7].lower()
        output = "%-18s %8s: %s" % (service.name, "(%s)" % kind, service.info)
        print('\n'.join(textwrap.wrap(output, width=79,
                                      subsequent_indent=" "*29)))
    service_iterator(query_list, _helper)


def c_list(query_list):
    """Lists all the available service names"""
    service_iterator(query_list, lambda service: print(service.name))


def c_start(query_list):
    """Starts services"""
    verify_root()
    action_iterator(query_list, "start", "Starting", "Failed")


def c_stop(query_list):
    """Stops services"""
    verify_root()
    action_iterator(query_list, "stop", "Stopping", "Failed")


def c_restart(query_list):
    """Restarts services"""
    verify_root()
    c_stop(query_list)
    c_start(query_list)


def c_status(query_list):
    """Prints the status of services"""
    verify_root()
    action_iterator(query_list, "is_up", "Up", "Down")


def c_version(_):
    """Prints the currently installed NAV version"""
    from nav import buildconf
    print("NAV %s" % buildconf.VERSION)


def usage():
    """Prints a usage screen to stderr."""
    print(__doc__, file=sys.stderr)

##############
# begin here #
##############
if __name__ == '__main__':
    main(sys.argv[1:])
