#!/usr/bin/perl
##################################################
# Sender delayed sms-meldinger til brukere.
#
# Skrevet av John Magne Bredal 29-06-01
##################################################
use Pg;
use strict;

my $loggfil = "/usr/local/nav/local/log/trapdetect/dsmslogg";
my $dbh_m = db_connect("manage","manage","eganam");
my $dbh_t = db_connect("trapdetect","trapdetect","tcetedpart");

my $boksid = 0;
my $input_ip;
my $input_enhet;
my $trapid;
my $syknavn;
my $beskrivelse;
my @message;

chomp (my $idag = `date +%d%m%y-%H:%M`);
open (LOG, ">>$loggfil") || die;
print LOG "---------- $idag ----------\n";
&main();
close LOG;

sub main {
    # Velger alle som skal ha dsms
    my $sporring = "select b.dsms_til,v.brukerid,v.trapid,v.kat,v.ukat,v.id from varsel v, varseltype vt,bruker b where v.vtypeid=vt.id and vt.navn like '%dsms%' and b.id=v.brukerid";
    my $hent_brukere = &db_select($sporring,$dbh_t);
    
    my %bruker_hash;
    
    # Setter alle elementer som er null til tekststrengen null
    while (my @bruker_liste = $hent_brukere->fetchrow) {
	$bruker_hash{$bruker_liste[5]} = [$bruker_liste[0],$bruker_liste[1],$bruker_liste[2],$bruker_liste[3],$bruker_liste[4]];
    }
    
    my @ider = keys %bruker_hash;
    # Finner starttidspunkt hver enkelt bruker og sender ut evt. beskjeder
    for my $ide (@ider) {

	print LOG "Innleggid: $ide\n";

	# Finner tidspunktet bruker skal ha dsms, hvis det er nå, gå videre, hvis ikke stopp.
	my $tidspunkt = $bruker_hash{$ide}[0];
	my $bruker = $bruker_hash{$ide}[1];
	my $trapid = $bruker_hash{$ide}[2];

	# Henter navn på trap
	my $hentsyknavn = &db_select("SELECT syknavn FROM trap WHERE id=$trapid",$dbh_t);
	my @temp = $hentsyknavn->fetchrow;
	$syknavn = $temp[0];
	print LOG "Trap: $syknavn\n";

	if ($idag =~ /-(\d+)/) {
	    my $time = $1;
	    if ($tidspunkt =~ /$time:\d{2}/) {
		
		# Finner starttidspunkt som vi må ha til spørring
		my $finn_tidspunkt = &db_select("SELECT dsms_fra FROM bruker WHERE id=$bruker",$dbh_t);
		my $dsms_fra = $finn_tidspunkt->fetchrow;
		chomp (my $dato = `date --date '1 day ago' +%Y-%m-%d `);
		$dsms_fra = "$dato $dsms_fra";
		print LOG "Starttidspunkt for spørring: $dsms_fra\n";

		# Spør om det har skjedd noe i løpet av natten
		my $finn_innlegg = &db_select("Select boksid,trap,trapsource,trapdescr from status where fra > '$dsms_fra' and til is null order by fra",$dbh_m);
#	    my $finn_innlegg = &db_select("Select boksid,trap,trapsource,trapdescr from status where fra > '2001-11-14 22:00:00' and til is null order by fra",$dbh_m);
		
		print LOG "Finner innlegg til bruker $bruker:\n";
		while (my @innlegg_liste = $finn_innlegg->fetchrow) {
		    ($boksid,my $trap,$input_enhet,$beskrivelse) = @innlegg_liste;
		    
		    #Sjekker om trap er den samme som brukeren abonnerer på
		    print LOG "Sjekker om $syknavn == $trap\n";
		    if ($syknavn eq $trap) {

			my $finn_info = &db_select("SELECT kat, kat2, orgid, ip, active FROM boks WHERE boksid=$boksid",$dbh_m);
#		    my $finn_info = &db_select("SELECT kat, kat2, orgid, ip, active FROM boks WHERE boksid=56",$dbh_m);
			my @enhet_liste = $finn_info->fetchrow;
			if ($finn_info->ntuples == 0) {
			    print LOG "Ingen slik boksid: $boksid\n";
			} else {
			    print LOG "Boks $boksid funnet\n";
			}
			my $active = pop @enhet_liste;
			
			# Hvis enheten ikke er aktiv, skal vi ikke sende beskjed.
			if ((not defined($active)) || $active =~ /t/i) {
			    #Finner ut om boksen tilsvarer abonnementet.
			    print LOG "Sjekker om '$bruker_hash{$ide}[3]' eq $enhet_liste[0]";
			    if ($bruker_hash{$ide}[3] eq $enhet_liste[0]) {
				print LOG " --> JA\n";
				print LOG "Sjekker om $bruker_hash{$ide}[4] eq $enhet_liste[1]";
				if ($bruker_hash{$ide}[4] eq $enhet_liste[1]) {
				    print LOG " --> JA\n";
				    # Vi skal sende varsel
				    &lag_trap($beskrivelse,$trapid);
				    &send_sms($bruker,$trapid);
				} else {
				    print LOG " --> NEI\n";
				}
			    } else {
				print LOG " --> NEI\n";
			    }
			    
			} #if
		    }
		    print LOG "--\n";
		} #while
	    } #if
	} # if
	print LOG "-\n";
    } # for
}

sub lag_trap {

    @message = ();
    my $beskjed = shift;
    my $trapid = shift;

#    print "$beskjed, $trapid\n";

    my $funnet;
    my %suboid;

    my $sporring = "SELECT navn FROM subtrap WHERE trapid=$trapid";
    my $finnsuboid = &db_select($sporring,$dbh_t);

    my @temp;
    while (@temp = $finnsuboid->fetchrow) {
	$suboid{@temp[0]}++;
    }
    
    # Har alle suboid'ene som keys i %suboid
    # Konstruerer trap'en
    my @beskjedarray = split /\s/, $beskjed;
    my $streng;
    while (@beskjedarray) {
	my $temp = pop @beskjedarray;
	if (exists $suboid{$temp}) {
	    $streng = "$temp = ".$streng;
	    push @message, $streng;
	    $streng = "";
	} else {
	    $streng = "$temp ".$streng;
	}
    }
#    print "Message:";
#    for (@message) {
#	print "$_";
#    }
#    print "\n";
}

sub send_sms {

    my $melding = ();
    my $brukerid = shift;
    print LOG "Sender sms til $brukerid\n";

    # Kutter ned på meldingen
    print LOG "Formaterer melding til sms\n";
    my $formatert_melding = &format_sms();
    $formatert_melding =~ s/\"//g;

    print LOG "$formatert_melding\n";

    # Legger meldingen inn i databasen
    print LOG "Legger meldingen inn i databasen...";

    my $ok;
    $ok = &db_exec("INSERT INTO smsutko (userid, tidspunkt, melding, sendt) VALUES ('$brukerid', now(), '$formatert_melding', 'N')",$dbh_t);

    if ($ok) {
    	print LOG "\tFERDIG\n";
    } else {
    	print LOG "det gikk heller dårlig..\n";
    }
}

##################################################
# Generell formatering av meldinger som skal sendes 
# vha. sms. Bruker filen smsconfig som ligger i etc/ 
# til å lese inn formateringsinfo.
# NB! Forskjellig fra den i Trapdetect
##################################################
sub format_sms {
    
    my $oid = $syknavn;
    my $funnet = 0;
    my $innlegg = "";

    # Leser inn formateringsinfo fra fil.
    open (FIL, "/usr/local/trapdetect/etc/smsconfig") or die "Kunne ikke åpne fil $!\n";
    while (<FIL>) {
	# Hopper over kommentarer
	unless (/^\#/) {
	    if (/^$oid/) {
		chomp;
		print LOG "Fant oid i fil: $_\n";
		$funnet = 1;
		$innlegg = $_;
	    }
	}
    }
    close FIL;

    if ($funnet) {
	my %var = (); # Her legges suboider

	# Message må ikke forandres!
	my @temp_message = @message;

	# Parser message
	$var{"avsender"} = $input_enhet;
	for (@temp_message) {
	    my @temp = split;
	    my $suboid = shift @temp;
	    shift @temp; # fjerner =
	    my $temp_streng;
	    while (my $temp = shift @temp) {
		$temp_streng .= $temp." ";
	    }
	    chop $temp_streng;
	    $var{$suboid} = $temp_streng;
	    $temp_streng = "";
	}

	# Replacer alle instanser av variable som er lik
	# suboider i config-fila.
	my @suboid = keys (%var);
	for (@suboid) {
	    $innlegg =~ s/\$$_/$var{$_}/;
	}
	print LOG $innlegg."\n";
	return $innlegg;
    } else {
	print LOG "Fant ikke innlegg i config-fil.\n";
    }

} # End format_sms

sub db_connect {
    my $db = $_[0];
    my $user = $_[1];
    my $pass = $_[2];
    my $conn = Pg::connectdb("dbname=$db user=$user password=$pass");
    die $conn->errorMessage unless PGRES_CONNECTION_OK eq $conn->status;
    return $conn;
}

sub db_select {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print LOG "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_TUPLES_OK);
    return $resultat;
}

sub db_execute {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print LOG "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_COMMAND_OK);
#die er byttet med print
}
