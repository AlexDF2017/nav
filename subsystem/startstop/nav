#!/usr/bin/env python
# -*- coding: ISO8859-1 -*-
#
# This file is part of the NAV project.
#
# Common start/stop script for all NAV services.  It will also manage
# loading/unloading of cron-based tasks in the NAV system.
#
# Copyright (c) 2004 by NTNU, ITEA
# Authors: Morten Vold <morten.vold@itea.ntnu.no>
#
"""This command is your interface to start, stop and query NAV services.

Usage: nav [command] [service ...]

The selected command will be applied to all known services, unless you
specify a list of services after the command.
Available commands are:

  start   -- Start services.
  stop    -- Stop services.
  status  -- Query the status of services.
  info    -- Display information about/description of services.
  list    -- Display list of known services.
  
  version -- Displays which version of NAV you are running.
"""
__id__ = "$Id$"

import sys
import os
import os.path
import getopt
try:
    from startstop import *
except ImportError:
    from nav.startstop import *

try:
    services = ServiceRegistry()
except OSError, e:
    print >> sys.stderr, "A problem occurred, which prevented this command from running."
    print >> sys.stderr, str(e)
    sys.exit(1)

allowNonRoot = False

def main(args):
    global services
    
    try:
        opts, args = getopt.getopt(args, '', ['nonroot'])
    except getopt.GetoptError, error:
        print >> sys.stderr, error
        usage()
        sys.exit(1)

    for opt,val in opts:
        if opt == '--nonroot':
            global allowNonRoot
            allowNonRoot = True

    if len(args) == 0:
        usage()
        sys.exit(1)

    command = args.pop(0)
    if len(args) == 0:
        queryList = services.keys()
    else:
        queryList = args

    # Use reflection to decide whether the command is known, and to
    # call it if it is.
    self = sys.modules[__name__]
    commandFuncName = 'c_' + command
    if hasattr(self, commandFuncName):
        commandFunc = self.__dict__[commandFuncName]
        commandFunc(queryList)
    else:
        print >> sys.stderr, "Unknown command: " + command

def checkroot():
    if not allowNonRoot and os.geteuid() != 0:
        print >> sys.stderr, "You should be root to run this command."
        sys.exit(10)

def serviceIterator(queryList, func):
    for service in queryList:
        if services.has_key(service):
            func(services[service])
        else:
            print >> sys.stderr, "Unknown service: " + service

def c_info(queryList):
    def helper(service):
        print "%s (%s): %s" % (service.name,
                               service.__class__.__name__,
                               service.info)
    serviceIterator(queryList, helper)
    
def c_list(queryList):
    def helper(service):
        print service.name
    serviceIterator(queryList, helper)

def c_start(queryList):
    def helper(service):
        service.start()
    checkroot()
    serviceIterator(queryList, helper)
        
def c_stop(queryList):
    def helper(service):
        service.stop()
    checkroot()
    serviceIterator(queryList, helper)

def c_restart(queryList):
    def helper(service):
        service.restart()
    checkroot()
    serviceIterator(queryList, helper)
        
def c_status(queryList):
    def helper(service):
        service.isUp()
    checkroot()
    serviceIterator(queryList, helper)

def c_version(queryList):
    import nav
    if hasattr(nav, '__version__'):
        print "NAV " + nav.__version__
    elif hasattr(nav, 'VERSION'):
        print "NAV " + nav.VERSION
    else:
        print >> sys.stderr, "I cannot find any NAV version information!"

def usage():
    """ Print a usage screen to stderr."""
    print >> sys.stderr, __doc__

##############
# begin here #
##############
main(sys.argv[1:])
