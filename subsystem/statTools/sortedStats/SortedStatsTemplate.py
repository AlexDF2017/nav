#!/usr/bin/env python


"""
Autogenerated by CHEETAH: The Python-Powered Template Engine
 CHEETAH VERSION: 0.9.16a2
 Generation time: Wed Oct 11 13:35:13 2006
   Source file: SortedStatsTemplate.tmpl
   Source file last modified: Wed Oct 11 13:34:44 2006
"""

__CHEETAH_genTime__ = 'Wed Oct 11 13:35:13 2006'
__CHEETAH_src__ = 'SortedStatsTemplate.tmpl'
__CHEETAH_version__ = '0.9.16a2'

##################################################
## DEPENDENCIES

import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromFrameOrSearchList
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from nav.web.templates.MainTemplate import MainTemplate

##################################################
## MODULE CONSTANTS

try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFN=valueForName
currentTime=time.time

##################################################
## CLASSES

class SortedStatsTemplate(MainTemplate):
    """
    
    Autogenerated by CHEETAH: The Python-Powered Template Engine
    """

    ##################################################
    ## GENERATED METHODS


    def __init__(self, *args, **KWs):
        """
        
        """

        MainTemplate.__init__(self, *args, **KWs)

    def content(self,
            trans=None,
            dummyTrans=False,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName,
            getmtime=getmtime,
            currentTime=time.time):


        """
        Generated from #def content at line 4, col 1.
        """

        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        write = trans.response().write
        SL = self._searchList
        filter = self._currentFilter
        globalSetVars = self._globalSetVars
        
        ########################################
        ## START - generated method body
        
        write('''

<h3>Sorted Statistics</h3>

<form action='' method='GET'>
<table>
<tr><td>Choose view</td><td>Timeframe</td><td>Rows</td><td>Live</td><td>&nbsp;</td></tr>
<tr>

''')
        #  Drop-down to choose view
        write('''

<td><select name='view'>

''')
        sectionslist = VFN(VFFSL(SL,"config",True),"sections",False)()
        write(filter(VFN(VFFSL(SL,"sectionslist",True),"sort",False)(), rawExpr='$sectionslist.sort()')) # from line 20, col 1.
        write('\n')
        for s in VFFSL(SL,"sectionslist",True):
            write('\n')
            if VFFSL(SL,"s",True) == 'ss_general':
                continue
            write('\n')
            #  If we have a view, mark it as selected, else don't bother.
            if VFFSL(SL,"view",True) == VFFSL(SL,"s",True):
                write('<option value="')
                write(filter(VFFSL(SL,"s",True), rawExpr='$s')) # from line 29, col 16.
                write('" selected>')
                write(filter(VFN(VFFSL(SL,"config",True),"get",False)(VFFSL(SL,"s",True), 'name'), rawExpr="$config.get($s, 'name')")) # from line 29, col 29.
                write('</option>\n')
            else:
                write('<option value="')
                write(filter(VFFSL(SL,"s",True), rawExpr='$s')) # from line 31, col 16.
                write('">')
                write(filter(VFN(VFFSL(SL,"config",True),"get",False)(VFFSL(SL,"s",True), 'name'), rawExpr="$config.get($s, 'name')")) # from line 31, col 20.
                write('</option>\n')
            write('\n')
        write('''</select></td>


<td><select name='fromtime'>
''')
        for t in VFN(VFFSL(SL,"fromtimes",True),"keys",False)():
            write('\n')
            if VFFSL(SL,"fromtime",True) == VFFSL(SL,"t",True):
                write("<option value='")
                write(filter(VFFSL(SL,"t",True), rawExpr='$t')) # from line 42, col 16.
                write("' selected>")
                write(filter(VFFSL(SL,"fromtimes",True)[VFFSL(SL,"t",True)], rawExpr='$fromtimes[$t]')) # from line 42, col 29.
                write('</option>\n')
            else:
                write("<option value='")
                write(filter(VFFSL(SL,"t",True), rawExpr='$t')) # from line 44, col 16.
                write("'>")
                write(filter(VFFSL(SL,"fromtimes",True)[VFFSL(SL,"t",True)], rawExpr='$fromtimes[$t]')) # from line 44, col 20.
                write('</option>\n')
            write('\n')
        write('''</select></td>


<td><input type='text' name='numrows' value=\'''')
        write(filter(VFFSL(SL,"numrows",True), rawExpr='$numrows')) # from line 51, col 46.
        write("' size='3'></td>\n\n")
        if VFFSL(SL,"forcedview",True) == '1':
            write('<td><input type="checkbox" name="forcedview" value="1" checked></td>\n')
        else:
            write('<td><input type="checkbox" name="forcedview" value="1"></td>\n')
        write('''
<td><input type="submit" name="normalview" value="View"></td>

</form>

</tr></table>


''')
        if VFFSL(SL,"showArr",True):
            write('<table>\nSorted statistics for ')
            write(filter(VFN(VFFSL(SL,"config",True),"get",False)(VFFSL(SL,"view",True), 'name'), rawExpr="$config.get($view, 'name')")) # from line 68, col 23.
            write(' ')
            write(filter(VFFSL(SL,"fromtimes",True)[VFFSL(SL,"fromtime",True)], rawExpr='$fromtimes[$fromtime]')) # from line 68, col 50.
            write('.\n')
            #  Walk the sortedkeys and print the values
            counter = 1
            write('\n\n')
            for line in VFFSL(SL,"sortedKeys",True):
                write('\n')
                #  Format the values. 
                write('\n')
                value = "%.2f" %(VFFSL(SL,"showArr",True)[VFFSL(SL,"line",True)])
                write('<tr><td>')
                write(filter(VFFSL(SL,"counter",True), rawExpr='$counter')) # from line 78, col 9.
                write('</td><td>')
                write(filter(VFFSL(SL,"line",True), rawExpr='$line')) # from line 78, col 26.
                write("</td><td align='right'>")
                write(filter(VFFSL(SL,"value",True), rawExpr='$value')) # from line 78, col 54.
                write('</td><td>')
                write(filter(VFFSL(SL,"units",True), rawExpr='$units')) # from line 78, col 69.
                write('</td></tr>\n')
                counter += 1
                write('\n')
                if VFFSL(SL,"counter",True) > int(VFFSL(SL,"numrows",True)):
                    break
                write('\n')
            write('''


</table>
''')
        write('\n')
        if VFFSL(SL,"exetime",True) != 0:
            write('<p>Got data in ')
            write(filter(VFFSL(SL,"exetime",True), rawExpr='$exetime')) # from line 93, col 16.
            write(' seconds (')
            write(filter(VFFSL(SL,"footer",True), rawExpr='$footer')) # from line 93, col 34.
            write(').</p>\n')
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        if dummyTrans:
            return trans.response().getvalue()
        else:
            return ""
        

    def writeBody(self,
            trans=None,
            dummyTrans=False,
            VFFSL=valueFromFrameOrSearchList,
            VFN=valueForName,
            getmtime=getmtime,
            currentTime=time.time):


        """
        This is the main method generated by Cheetah
        """

        if not trans:
            trans = DummyTransaction()
            dummyTrans = True
        write = trans.response().write
        SL = self._searchList
        filter = self._currentFilter
        globalSetVars = self._globalSetVars
        
        ########################################
        ## START - generated method body
        
        write('\n\n')
        
        ########################################
        ## END - generated method body
        
        if dummyTrans:
            return trans.response().getvalue()
        else:
            return ""
        
    ##################################################
    ## GENERATED ATTRIBUTES


    _mainCheetahMethod_for_SortedStatsTemplate= 'writeBody'


# CHEETAH was developed by Tavis Rudd, Mike Orr, Ian Bicking and Chuck Esterbrook;
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org

##################################################
## if run from command line:
if __name__ == '__main__':
    SortedStatsTemplate().runAsMainProgram()

