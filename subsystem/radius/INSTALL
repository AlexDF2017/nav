Author:         Roger Kristiansen <roger.kristiansen@gmail.com>
		Kai Bj√∏rnenak <kai.bjornenak@cc.uit.no>
Date:           Aug. 4, 2005

Changelog: 	Sep. 18, 2005 
		Mar. 30, 2006 - This module originally
                intended to be a Radius accounting module. Updated
                docs to reflect that it is now made into a more
                generic Radius module.
		Feb. 08, 2008 - Some updates to reflect changes done
		in the module.

If you find errors or unclear points in this file, please notify the
author, and a attempt at fixing it will be made.
--------------------------------------------------------------------------------

Table of contents:

0. Enviroment and testing
1. Configuring NAV
2. Installing the accounting module
    Step 1: Configuring the database
    Step 2: Configuring freeradius
    Step 3: Configuring your switches
    Step 4: Configuring the radius accounting subsystem
    Step 5: Setting up automatic deletion of old entries
    Step 6: Finishing up
3. Installing the error log module
    Step 1: Configuring the database
    Step 2: Installing and starting the parsing script on the radius server
    Step 3: Configuring the error log module subsystem
    Step 4: Setting up automatic deletion of old entries



--------------------------------------------------------------------------------
0. Enviroment and testing
#########################

The module has been tested and run on the following:

NAV 3.3.2
FreeBSD 6.2
FreeRADIUS 1.1.7
PostgreSQL 8.2.5
Firefox 2.0.0.x


1. Configuring NAV
##################

<?>/etc/db.conf
---------------

We need to tell NAV which account should be used to run queries on our
database table. This only needs to be done if your tables are in NAV's
'manage' database.

script_radius      = <db user with INSERT, UPDATE, DELETE privileges>
userpw_<username> = <password>


Alternate configuration for differentiated db-users
---------------------------------------------------

It might be desirable to have separate users for select-queries and
queries that does modifications to the table (insert, delete, update),
this is up to the user to decide, this will require that you create
two new users in your db and do some modification of these files:

db.conf
postgresql.conf
radius.py
radius_config.py

Make two new new entries in db.conf

script_radius_front = <db user with SELECT privilege>
script_radius_back = <db user with INSERT, UPDATE, DELETE privileges>

postgresql.conf is the same file that is mentioned in step 2.2, change
login here to whatever you called your user with write-privileges.


--------------------------------------------------------------------------------

2. Installing the accounting module 
####################################


.-----------------------------------.
| Step 1: Configuring the database  |
'-----------------------------------'


Creating the table and indices:
-------------------------------

We are doing accounting directly into NAV's 'manage' database, so everything
described here should be done on this database. You could probably use the
Radius Accounting NAV module against an external (to NAV)  database as well,
but you will have to change the way we connect to the database in radius.py.

In postgres, execute the sql commands in sql/accounting_tables.sql:

manage=> \i /path/to/radius_module/sql/accounting_tables.sql


Creating the users: ------------------- 

We need a user that can access this table. This should be a user for
Freeradius and NAV subsystem, that needs SELECT, INSERT and UPDATE
privilege.

Edit the file sql/accounting_users.sql to reflect the usernames and passwords
you want, and then execute the sql commands in postgres:

manage=> \i /path/to/radius_module/sql/accounting_users.sql




.-----------------------------------.
| Step 2: Configuring FreeRadius    |
'-----------------------------------'


<path to freeradius>/etc/raddb/postgresql.conf
----------------------------------------------

The following needs to be set:

server          - address to your PostgreSQL server
login           - the name of the user you grantet SELECT, INSERT and UPDATE 
                  priviledge to on the radius accounting table, ie. the
                  mentioned 'radiuswrite' user.
password        - Take a wild guess.
radius_db       - This should be set to "manage" for a standard NAV install
acct_table1     - This should be set to the name of your accounting table
acct_table2     - Same as above. Freeradius lets you log Start and Stop 
                  packets to different tables, but we don't make use of this.

The accounting queries in this file also needs to be replaced, since we have 
messed around a bit with the default setup of the table. Replace them with 
these:

	accounting_onoff_query = "UPDATE ${acct_table1} \
		SET AcctStopTime = (now() - '%{Acct-Delay-Time:-0}'::interval), \
		AcctSessionTime = (EXTRACT(EPOCH FROM(now()::timestamp with time zone - AcctStartTime::timestamp with time zone - '%{Acct-Delay-Time:-0}'::interval)))::BIGINT, \
		AcctTerminateCause='%{Acct-Terminate-Cause}', AcctStopDelay = '%{Acct-Delay-Time:-0}' \
		WHERE AcctSessionTime IS NULL AND AcctStopTime IS NULL AND NASIPAddress= '%{NAS-IP-Address}' AND AcctStartTime <= now()"


	accounting_update_query = "UPDATE ${acct_table1} \
                SET FramedIPAddress = NULLIF('%{Framed-IP-Address}', '')::inet, \
                AcctSessionTime = (EXTRACT(EPOCH FROM(now()::timestamp with time zone - AcctStartTime::timestamp with time zone - '%{Acct-Delay-Time:-0}'::interval)))::BIGINT, \
                AcctInputOctets = (('%{Acct-Input-Gigawords:-0}'::bigint << 32) + '%{Acct-Input-Octets:-0}'::bigint), \
                AcctOutputOctets = (('%{Acct-Output-Gigawords:-0}'::bigint << 32) + '%{Acct-Output-Octets:-0}'::bigint) \
                WHERE AcctUniqueId = '%{Acct-Unique-Session-Id}' AND UserName = '%{SQL-User-Name}' \
                AND NASIPAddress= '%{NAS-IP-Address}' AND AcctStopTime IS NULL"

        accounting_update_query_alt = "INSERT into ${acct_table1} \
                (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, NASPortType, CiscoNASPort, AcctStartTime, \
                AcctSessionTime, AcctInputOctets, AcctOutputOctets, CalledStationId, CallingStationId, \
                FramedProtocol, FramedIPAddress) \
                values('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', '%{Realm}', '%{NAS-IP-Address}', \
                '%{NAS-Port-Type}', NULLIF('%{Cisco-NAS-Port}', ''), (now() -  '%{Acct-Delay-Time:-0}'::interval - '%{Acct-Session-Time:-0}'::interval), \
                NULLIF('%{Acct-Session-Time}','')::bigint, \
                (('%{Acct-Input-Gigawords:-0}'::bigint << 32) + '%{Acct-Input-Octets:-0}'::bigint), \
                (('%{Acct-Output-Gigawords:-0}'::bigint << 32) + '%{Acct-Output-Octets:-0}'::bigint), '%{Called-Station-Id}', \
                '%{Calling-Station-Id}', '%{Framed-Protocol}', \
                NULLIF('%{Framed-IP-Address}', '')::inet)"

        accounting_start_query = "INSERT into ${acct_table1} \
                (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, NASPortType, CiscoNASPort, AcctStartTime, \
                CalledStationId, CallingStationId, FramedProtocol, FramedIPAddress, AcctStartDelay) \
                values('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', '%{Realm}', '%{NAS-IP-Address}', \
                '%{NAS-Port-Type}', NULLIF('%{Cisco-NAS-Port}', ''), (now() - '%{Acct-Delay-Time:-0}'::interval), \
                '%{Called-Station-Id}', '%{Calling-Station-Id}', '%{Framed-Protocol}', \
                NULLIF('%{Framed-IP-Address}', '')::inet, '%{Acct-Delay-Time:-0}') "

        accounting_start_query_alt  = "UPDATE ${acct_table1} \
                SET AcctStartTime = (now() - '%{Acct-Delay-Time:-0}'::interval) \
                WHERE AcctUniqueId = '%{Acct-Unique-Session-Id}' AND UserName = '%{SQL-User-Name}' \
                AND NASIPAddress = '%{NAS-IP-Address}' AND AcctStopTime IS NULL"

        accounting_stop_query = "UPDATE ${acct_table2} \
                SET AcctStopTime = (now() - '%{Acct-Delay-Time:-0}'::interval), \
                AcctSessionTime = NULLIF('%{Acct-Session-Time}', '')::bigint, \
                AcctInputOctets = (('%{Acct-Input-Gigawords:-0}'::bigint << 32) + '%{Acct-Input-Octets:-0}'::bigint), \
                AcctOutputOctets = (('%{Acct-Output-Gigawords:-0}'::bigint << 32) + '%{Acct-Output-Octets:-0}'::bigint), \
                AcctTerminateCause = '%{Acct-Terminate-Cause}', AcctStopDelay = '%{Acct-Delay-Time:-0}', \
                FramedIPAddress = NULLIF('%{Framed-IP-Address}', '')::inet \
                WHERE AcctUniqueId = '%{Acct-Unique-Session-Id}' AND UserName = '%{SQL-User-Name}' \
                AND NASIPAddress = '%{NAS-IP-Address}' AND AcctStopTime IS NULL"

        accounting_stop_query_alt = "INSERT into ${acct_table2} \
                (AcctSessionId, AcctUniqueId, UserName, Realm, NASIPAddress, NASPortType, CiscoNASPort, AcctStartTime, AcctStopTime, \
                AcctSessionTime, AcctInputOctets, AcctOutputOctets, CalledStationId, CallingStationId, \
                AcctTerminateCause, FramedProtocol, FramedIPAddress, AcctStopDelay) \
                values('%{Acct-Session-Id}', '%{Acct-Unique-Session-Id}', '%{SQL-User-Name}', '%{Realm}', '%{NAS-IP-Address}', \
                '%{NAS-Port-Type}', NULLIF('%{Cisco-NAS-Port}', ''), (now() -  '%{Acct-Delay-Time:-0}'::interval - '%{Acct-Session-Time:-0}'::interval), \
                (now() - '%{Acct-Delay-Time:-0}'::interval), NULLIF('%{Acct-Session-Time}', '')::bigint, \
                (('%{Acct-Input-Gigawords:-0}'::bigint << 32) + '%{Acct-Input-Octets:-0}'::bigint), \
                (('%{Acct-Output-Gigawords:-0}'::bigint << 32) + '%{Acct-Output-Octets:-0}'::bigint), '%{Called-Station-Id}', \
                '%{Calling-Station-Id}', '%{Acct-Terminate-Cause}', '%{Framed-Protocol}', \
                NULLIF('%{Framed-IP-Address}', '')::inet, '%{Acct-Delay-Time:-0}')"


NB: Remember to set the '$INCLUDE  ${confdir}/postgresql.conf' statement
in radiusd.conf, it defaults to 'sql.conf' which is the MySQL module. 



<path to freeradius>/etc/raddb/radiusd.conf
-------------------------------------------

We noticed how some sessions' Acct-Unique-Session-Id field changed mid-session
without any apparent reason. We found that some NAS-es had an Acct-Session-Id
field containing, among other data, the sessions starting time. This starting
time, for some strange strange reason that we're unaware of, sometimes change, 
mid-session, by a second or two, causing Acct-Unique-Session-Id to also change,
since it is a hash of Acct-Session-Id, among others. This small routine (or 
whatever the correct naming is) strips the date and time out of Acct-Session-Id.

It needs to be defined in the main section, ie. among the other attr_rewrite 
examples, and called in the preacct{} section, before acct_unique (which 
generates the unique session id). The regexp isn't very precise, but it does 
the job. Feel free to write a new one and share it with us, this wasn't a
priority :]


    attr_rewrite modify_acctsessionid {
            attribute = Acct-Session-Id
            searchin = packet
            searchfor = "[0-3][0-9]\/[0-3][0-9]\/[0-9]{2}\ [0-2][0-9]\:[0-5][0-9]\:[0-5][0-9]"
            replacewith = ""
            append = no
    }

Also add a line saying 'sql' to the accounting{} section. We have put it last,
but we have also seen people recommending it being put between 'unix' and 
'radutmp', although the reason was unclear. We've experienced no (known) 
problems by putting it last. :]


.-----------------------------------.
| Step 3: Configuring your switches |
'-----------------------------------'

To get accounting data from your dot1x switches, they must be configured using
the following:

'aaa accounting dot1x default start-stop group radius'
'radius-server vsa send accounting'


.--------------------------------------------.
| Step 4: Configuring the accounting module  |
'--------------------------------------------'

Edit radius_config.py, change the values according to your setup. You should
probably only have to change REAUTH_TIMEOUT to reflect the reauthentication
interval on your radius server. The time is in seconds. This value is used
in the search results, to indicate whether a session is (probably) still active,
or if it has timed out and not sent an explicit "Stop".

.------------------------------------------------------.
| Step 5: Setting up automatic deletion of old entries | 
'------------------------------------------------------'

To automatically delete old accounting entries, we have made a modification
to NAV's navclean.py. I'm not quite sure of the usefulness of doing this, so
it might be split of into a separate cleanup script for the accounting module
at a later time. Anyway, to set this up, enter the navcron crontab 
('crontab -u navcron -e'), and make an entry executing our modified 
navclean.py on regular intervals. ie:

50      5       *       *       6       /path/to/radiusmodule/bin/navclean.py 
--radius -E "3 months" -f

This will run the script once a week, deleting all entries older than three 
months.


.-----------------------------------.
| Step 6: Finishing up              |
'-----------------------------------'

Restart freeradius, and you should be good to go. At least in theory. We have
probably forgotten _something_ - please tell us what, so we can update this
file. :)



3. Installing the error log module
##################################

    Step 1: Configuring the database
    Step 2: Installing the parsing script on the radius server
    Step 4: Configuring the error log module subsystem


.-----------------------------------.
| Step 1: Configuring the database  |
'-----------------------------------'

Creating the table and indices:
-------------------------------

In postgres, execute the sql commands in sql/accounting_tables.sql:

manage=> \i /path/to/radius_module/sql/log_tables.sql


Creating the users:
-------------------

We need a user that can access this table. This should be a user for
Freeradius and NAV subsystem, that needs SELECT, INSERT and UPDATE
privilege.

Edit the file sql/accounting_users.sql to reflect the usernames and passwords
you want, and then execute the sql commands in postgres:

Edit the file sql/users.sql to reflect the usernames and passwords
you want, and then execute the sql commands in postgres:

manage=> \i /path/to/radius_module/sql/users.sql

If you already did this while setting up the accounting module, this does not
need to be done again.

Consider setting up a separate user with the appropriate rights to the tables.


.-------------------------------------------------------------------------.
| Step 2: Installing and starting the parsing script on the radius server | 
'-------------------------------------------------------------------------'

Edit the variables at the top of /path/to/radius_module/bin/radiusparser.py to
reflect the hostname of the nav database server, the username and password you
want for connecting to the database, and the path to the log file.

Copy the script to a location of your choice on the server where the radius.log
is accessible as part of the file system. Create a cron job that executes this 
script as often as you would like to make sure that the script is actually
running. For example:

0 * * * *  /path/to/radiusparser.py

This will run the script every hour, but if it detects that it is already
running, it quits and leaves the running script alone.

Of course, you may also simply execute the script yourself by running it at the
command line, but you will lose the security of the hourly test.


.------------------------------------------.
| Step 3: Configuring the error log module |
'------------------------------------------'

Edit radius_config.py, change the values according to your setup. Not much
should need to be changed here, except perhaps the ACCT_TABLE variable, if you
have chosen a different name than the default.

.------------------------------------------------------.
| Step 4: Setting up automatic deletion of old entries | 
'------------------------------------------------------'

You probably don't want the entries in the error log accumulating forever, so
to delete them automatically, enter the navcron crontab 
('crontab -u navcron -e'), and make an entry executing radiuslog_clean.py
on regular intervals. ie:

45      5       *       *       6       /path/to/radiusmodule/bin/radiuslog_
clean.py -E '1 month'

This will run the script once a week, deleting all entries older than one
month.


#----------------------------------------------------------------------------------#
