#!/usr/bin/env python
# -*- coding: UTF-8 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1205414711.812829
__CHEETAH_genTimestamp__ = 'Thu Mar 13 14:25:11 2008'
__CHEETAH_src__ = 'nav/web/templates/GraphML.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Mar 13 14:25:10 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class GraphML(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  $Id$
        # 
        #  Copyright 2007 UNINETT AS
        # 
        #  This file is part of Network Administration Visualized (NAV)
        # 
        #  NAV is free software; you can redistribute it and/or modify
        #  it under the terms of the GNU General Public License as published by
        #  the Free Software Foundation; either version 2 of the License, or
        #  (at your option) any later version.
        # 
        #  NAV is distributed in the hope that it will be useful,
        #  but WITHOUT ANY WARRANTY; without even the implied warranty of
        #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        #  GNU General Public License for more details.
        # 
        #  You should have received a copy of the GNU General Public License
        #  along with NAV; if not, write to the Free Software
        #  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
        # 
        # 
        #  Author: Kristian Klette
        # 
        write('''<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
             http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

''')
        #  Defined GraphML-attributes
        #  TODO: Add more attributes
        write('''<key id="sysname" for="node" attr.name="sysname" attr.type="string"/>
<key id="ip" for="node" attr.name="ip" attr.type="string"/>
<key id="image" for="node" attr.name="image" attr.type="string"/>
<key id="category" for="node" attr.name="category" attr.type="string"/>
<key id="cpuload" for="node" attr.name="cpuload" attr.type="string"/>
<key id="room" for="node" attr.name="room" attr.type="string"/>
<key id="location" for="node" attr.name="location" attr.type="string"/>
<key id="uptime" for="node" attr.name="uptime" attr.type="string"/>
<key id="up" for="node" attr.name="up" attr.type="string"/>
<key id="link_load_in" for="edge" attr.name="link_load_in" attr.type="string"/>
<key id="link_load_out" for="edge" attr.name="link_load_out" attr.type="string"/>
<key id="link_capacity" for="edge" attr.name="link_capacity" attr.type="string"/>
<key id="from_interface" for="edge" attr.name="from_interface" attr.type="string"/>
<key id="to_interface" for="edge" attr.name="to_interface" attr.type="string"/>
<key id="from_sysname" for="edge" attr.name="from_sysname" attr.type="string"/>
<key id="to_sysname" for="edge" attr.name="to_sysname" attr.type="string"/>

<graph id="main" edgedefault="directed">
''')
        for box in VFFSL(SL,"netboxes",True): # generated from line 51, col 2
            write('\t<node id="')
            _v = VFFSL(SL,"box.netboxid",True) # '$box.netboxid' on line 52, col 12
            if _v is not None: write(_filter(_v, rawExpr='$box.netboxid')) # from line 52, col 12.
            write('">\n\t\t<data key="sysname">')
            _v = VFFSL(SL,"box.sysname",True) # '$box.sysname' on line 53, col 23
            if _v is not None: write(_filter(_v, rawExpr='$box.sysname')) # from line 53, col 23.
            write('</data>\n\t\t<data key="ip">')
            _v = VFFSL(SL,"box.ip",True) # '$box.ip' on line 54, col 18
            if _v is not None: write(_filter(_v, rawExpr='$box.ip')) # from line 54, col 18.
            write('</data>\n\t\t<data key="category">')
            _v = VFFSL(SL,"box.catid",True) # '$box.catid' on line 55, col 24
            if _v is not None: write(_filter(_v, rawExpr='$box.catid')) # from line 55, col 24.
            write('</data>\n\t\t<data key="room">')
            _v = VFFSL(SL,"box.roomid",True) # '$box.roomid' on line 56, col 20
            if _v is not None: write(_filter(_v, rawExpr='$box.roomid')) # from line 56, col 20.
            write('</data>\n\t\t<data key="up">')
            _v = VFFSL(SL,"box.up",True) # '$box.up' on line 57, col 18
            if _v is not None: write(_filter(_v, rawExpr='$box.up')) # from line 57, col 18.
            write('</data>\n\t\t<data key="location">')
            _v = VFFSL(SL,"box.descr",True) # '$box.descr' on line 58, col 24
            if _v is not None: write(_filter(_v, rawExpr='$box.descr')) # from line 58, col 24.
            write('</data>\n\t\t<data key="cpuload">-1.0</data>\n        <data key="image">https://navdev.uninett.no/netmap/applet/')
            _v = VFFSL(SL,"box.catid",True) # '${box.catid}' on line 60, col 67
            if _v is not None: write(_filter(_v, rawExpr='${box.catid}')) # from line 60, col 67.
            write('.png</data>\n    </node>\n')
        a = 0
        for conn in VFFSL(SL,"connections",True): # generated from line 64, col 5
            write('    <edge id="')
            _v = VFFSL(SL,"a",True) # '$a' on line 65, col 15
            if _v is not None: write(_filter(_v, rawExpr='$a')) # from line 65, col 15.
            write('" source="')
            _v = VFFSL(SL,"conn.netboxid",True) # '$conn.netboxid' on line 65, col 27
            if _v is not None: write(_filter(_v, rawExpr='$conn.netboxid')) # from line 65, col 27.
            write('" target="')
            _v = VFFSL(SL,"conn.to_netboxid",True) # '$conn.to_netboxid' on line 65, col 51
            if _v is not None: write(_filter(_v, rawExpr='$conn.to_netboxid')) # from line 65, col 51.
            write('">\n    <data key="link_capacity">')
            _v = VFFSL(SL,"conn.speed",True) # '$conn.speed' on line 66, col 31
            if _v is not None: write(_filter(_v, rawExpr='$conn.speed')) # from line 66, col 31.
            write('</data>\n')
            if VFFSL(SL,"conn.load",True): # generated from line 67, col 1
                write('     <data key="link_load_in">')
                _v = VFN(VFFSL(SL,"conn",True),"load",True)[0] # '$conn.load[0]' on line 68, col 31
                if _v is not None: write(_filter(_v, rawExpr='$conn.load[0]')) # from line 68, col 31.
                write('</data>\n     <data key="link_load_out">')
                _v = VFN(VFFSL(SL,"conn",True),"load",True)[1] # '$conn.load[1]' on line 69, col 32
                if _v is not None: write(_filter(_v, rawExpr='$conn.load[1]')) # from line 69, col 32.
                write('</data>\n')
            else: # generated from line 70, col 1
                write('     <data key="link_load_in">-1</data>\n     <data key="link_load_out">-1</data>\n')
            write('     <data key="from_interface">')
            _v = VFFSL(SL,"conn.from_interface",True) # '$conn.from_interface' on line 74, col 33
            if _v is not None: write(_filter(_v, rawExpr='$conn.from_interface')) # from line 74, col 33.
            write('</data>\n     <data key="to_interface">')
            _v = VFFSL(SL,"conn.to_interface",True) # '$conn.to_interface' on line 75, col 31
            if _v is not None: write(_filter(_v, rawExpr='$conn.to_interface')) # from line 75, col 31.
            write('</data>\n     <data key="from_sysname">')
            _v = VFFSL(SL,"conn.from_sysname",True) # '$conn.from_sysname' on line 76, col 31
            if _v is not None: write(_filter(_v, rawExpr='$conn.from_sysname')) # from line 76, col 31.
            write('</data>\n     <data key="to_sysname">')
            _v = VFFSL(SL,"conn.to_sysname",True) # '$conn.to_sysname' on line 77, col 29
            if _v is not None: write(_filter(_v, rawExpr='$conn.to_sysname')) # from line 77, col 29.
            write('</data>\n    </edge>\n')
            a = VFFSL(SL,"a",True) +1
        write('</graph>\n</graphml>\n')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_GraphML= 'respond'

## END CLASS DEFINITION

if not hasattr(GraphML, '_initCheetahAttributes'):
    templateAPIClass = getattr(GraphML, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(GraphML)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=GraphML()).run()


