

Dokumentasjon av cricket arbeid sommer 2002 - stain@itea.ntnu.no , danielsa@itea.ntnu.no

-----------------------
Oversikt

1)innlegging til database
   - forandring av mal
2)snmpd
  -tilegg til snmpd
3)databaseformat
4)makeconfig
5)cricket
6)jyhton - plugin
7)problemer
8)vyer

------------------------

1)innlegging til database

  Alle serverene må legges inn i filen server.txt 
  (som ligger på /usr/local/nav/local/etc/kilde/server.txt) 
  ex på format: 
    382s:krakatau.stud.ntnu.no:sdrift:SRV:WIN-STUD::Domenekontroller studenter 
  Se i header på filen for forklaring på hva de enkelte ting står for.

  Deretter må database.pl (cvsroot lib/database.pl) kjøres for at disse serverene skal havne 
  i databasen.

  Forandring av mal:
  Vi har to forandringer som vi har lagt inn i cvsroot under /etc/mal/server.txt.mal:
  i) Vi må ha  inn et eget kategorifelt for boksen (mail,
     terminaltjener, webtjener, domenekontroller). Feltet er
     kommaseparert slik at en boks kan være i flere kategorier.

     Vi har imidlertid ikke fått til å forandre database.pl slik at den
    legger dette feltet i databasen. Det hadde vært fint om den som har
    skrevet scriptet database.pl kan ta med dette.

  ii)Vi må også ha inn om boksen skal overvåkes eller ikke, dette må
     også legges inn i databasen via database.pl-scriptet.
  
2)snmpd
  
  Vi benytter oss av snmp for å hente in info fra serverene og dette
  krever en snmp-daemon på alle maskinene vi skal hente inn info fra.
  Det er ulik snmpd for Windows og Linux/unix.
  
  i)Windows 
    Vi har prøvd å bruke net-snmp sin daemon men denne gav fra seg så
    lite info at vi ikke fant den god nok. Vi bruker Windows sin egen
    innebygde snmpd. Først så må snmp innst.  på Windows maskinen ,
    deretter så må tre filer mib.bin , perfmib.dll , perfmib.ini legges
    til i %systemroot%/system32 (som regel c:\winnt\system32). I tillegg
    må det gjøres noen registerendringer. Gå til startmenyen -> run og
    skriv regedit.
    
    Disse forandingene må gjøres :
    Go To Tree: [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SNMP\Parameters\ExtensionAgents]
    Add String: "PerfAgent"
    With Value: "SOFTWARE\Microsoft\PerformanceAgent\CurrentVersion"
    Add Key: [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PerformanceAgent\CurrentVersion]
    Add String: "Pathname"
    With Value: "%SystemRoot%\System32\perfmib.dll"

  ii)*nix
     her benytter vi oss av net-snmp (http://net-snmp.sourceforge.net/)
     Denne kan hentes ned med feks :
     wget http://nedlastingsurl/net-snmp-5.0.1.os.tar.gz
     tar zxvf net-snmp-5.0.1.os.tar.gz
     make
     make install
     
     a) Egne MIB-er
     En av fordelene med net-snmp er at det er relativt enkelt å spesifisere egene MIB'er 
     Dette har vi gjor for å kunne hente ut mailkø fra mailserverene våres. Det vil si på at
     alle mailgatewayene våres så har vi lagt til følgende linje i snmpd.conf.
     # legger inn en egendef MIB - dog definert i en rfc - for å sjekke mailkø
     pass .1.3.6.1.2.1.28.1.1.1 /usr/local/sbin/mailq.sh
   
     scriptet mailq ser slik ut:
     if  [ "$1" = "-g" ] || [ "$2" = ".1.3.6.1.2.1.28.1.1" ] ; then
         echo .1.3.6.1.2.1.28.1.1.1
         echo gauge
         mailq | tail -1 | awk '{print $5;}'
     fi

     Denne sjekker antall mail i kø.

     b) Anbefalte patcher
     Det er en feil i ucd-snmp 4.x og net-snmp 5.0.1 som fører til at
     ledig minne (snmpwalk 1.3.6.1.4.1.2021.4) rapporteres som -1.

     Patchen er i cvs:contrib/net-snmp-memory.patch
     

3)databaseformat
  Følgende tabeller er lagt til i nav-databasen:

  CREATE TABLE boksdisk (
    boksid INT4 NOT NULL REFERENCES boks ON UPDATE CASCADE ON DELETE CASCADE,
    path VARCHAR(255) NOT NULL,
    blocksize INT4 NOT NULL DEFAULT 1024,
    PRIMARY KEY (boksid, path)
    );
        
  CREATE TABLE boksinterface (
    boksid INT4 NOT NULL REFERENCES boks ON UPDATE CASCADE ON DELETE CASCADE,
    interf VARCHAR(50) NOT NULL,
    PRIMARY KEY (boksid, interf)
    );
              
  CREATE TABLE bokscategory (
    boksid INT4 NOT NULL REFERENCES boks ON UPDATE CASCADE ON DELETE CASCADE,
    category VARCHAR(30) NOT NULL,
    PRIMARY KEY(boksid, category)
    );              


  Alle disse tabellene er til hjelp når man automatisk skal generere 
  konfigfiler over hva cricket skal skal hente inn.

  Den første tabellen bokskategori fylles ut ved at man angir
  kategorier i servers.txt som beskrevet i pkt 1. De to neste tabellene blir
  automatisk fylt ut av jython scriptet som det står om i pkt. 4.

  Det er i tillegg blitt lagt til to kolonner i boks tabellen. Disse er 
  i) snmp_major(integer|default '1') som angir om boksen skal snmp
     overvåkes eller ikke samt versjon.
     eks : når snmp_major=0 skal den ikke overvåkes. Dersom man oppgir
           et tall angir man hvilken versjon av snmp man skal bruke samt
           at serveren da vil bli overvåket.
     Merk: Det tas foreløpig ingen hensyn til snmp-versjonen (versjon 1
     av protokollen brukes fast). Dette kan endre seg.

  ii)snmpagent(character varying(30))
     Dette feltet angir hvilken snmpd som kjører på boksen og fylles ut automatisk
     av jython-scriptet. Stort sett brukes dette til å lage
     spesialtilfeller for Windowsbokser, hvis agenter alltid er en del
     av OID-treet under 1.3.6.1.4.1.311

 
4)Makeconfig 

  I cvsroot cricket/bin er det et perlscript Makeconfig som genererer
  konfigfiler for cricket.  Dette scriptet måtte modifiseres litt slik
  at det også lagde konfigfiler til serverene våres.  Det som i korthet er
  gjort er at det lagt til en sub servers som henter ut serverinfo fra
  databasen og lager konfigfiler på bakgrunn av dette.
  Vi henviser til cvs:cricket/bin/Makeconfig og subkallet servers for kildekode.

5)Cricket

  Vi benytter oss av cricket (http://cricket.sourceforge.net) som nav
  allerede bygger mye på.  Cricket lager kataloger for rutere, svitsjer
  og servere (den delen som vi har jobbet med).
  I cvs:cricket/cricket-config_defaults/servers er det en Default-fil som er lagd for 
  å hente inn den snmp-informasjonen vi er int. i på serverene.

  Filen Defaults er relativt selvforklarende, men et par eksempler kommer :

  eks 1) OID    StorageDescription       1.3.6.1.2.1.25.2.3.1.3  
  vil si at cricket slår opp denne oid'en mot en server får ut følgende :

  host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.1 = /
  host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.2 = /log
  host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.3 = /usr
  host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.4 = /var
 
  her får cricket ut alle diskpartisjonenene til serveren og dermed kan den 
  senere hente inn info om partisjonstørrelse og partisjonforbruk 
  
  eks 2) OID sessionTotalwin                1.3.6.1.4.1.311.1.1.3.1.1.21.1.0
  vil si at man henter ut det totale antall sesjoner som er gjort mot denne 
  maskinen. At oid'en slutter med win betyr at dette gjelder Windowsbokser.

6)jython
  For å tilpasse cricketkonfigurasjonen er det nødvendig å inspisere
  boksene for å finne ut hvilke disker og nettverkskort som er til 
  stede (slik at f.eks. /usr/local blir overvåket riktig hver gang, selv
  om den skulle finne på å bytte MIB-nummer pga. en annen montering).

  For å gjøre dette er det generelt sett et javaprogram getDeviceData
  som løper rundt og sjekker alle enheter i databasen. Denne har et
  pluginssystem, hvor hver plugin behandler et subsett av alle enhetene. 
  Pluginene lagrer informasjon de finner i databasen. For servere sin
  del er det da oppføringer i tabellene boksdisk og boksinterface, samt
  snmp_agent i tabellen boks.

  Vi laget derfor en plugin som tar seg av alle serverne. Denne er
  skrevet i Jython, som kort fortalt er Python for Java. Denne
  kompileres så sammen til en komplett .jar-fil, som så legges i
  getDeviceData sin plugin-katalog. 

  Pluginen heter handlerServer og ligger i 
  cvs:navme/src/getDeviceData/plugins/handlerServer/src/handlerServer.py. 
  For å kompilere denne trenger du SDK >= 1.3, Jython, ant og
  getDeviceData.jar.  (ie må man kompilere getDeviceData først).

  Ifra cvs:navme/src/getDeviceData/plugins/handlerServer er det da
  bare å kjøre kommandoen ant, så kompilerer den og setter sammen en
  fil dists/handlerServer.jar.

  For å teste med getDeviceData kan man f.eks. gjøre slik:

  Stå i navme/src/getDeviceData/build (etter å ha bygd getDeviceData
  på omtrent samme måte). 

  bigbud:~/navme/src/getDeviceData/dist$ mkdir plugins
  bigbud:~/navme/src/getDeviceData/dist$ cd plugins
  bigbud:~/navme/src/getDeviceData/dist/plugins$ ln -s \
              ../../plugins/handlerServer/dist/HandlerServer.jar .
  bigbud:~/navme/src/getDeviceData/dist/plugins$ cd ..
  bigbud:~/navme/src/getDeviceData/dist$ java -jar getDeviceData.jar - \
                                          due.stud


7)problemer
  Det er fire ting som har vært spesielle:
  i) NT 
     Vi har ikke klart å hente ut HOST-RESOURCE-MIB fra NT 4.0 boksene våre.
     Dette har ført til at vi har droppet innhenting av info fra de boksene 
     våre som har dette os'et.
     HOST-RESOURCE-MIB er mib fra 1.3.6.1.2.1.25 og nedover. Som vi ser betyr dette 
     at vi ikke får hentet ut disker,antall pros(numOfPros) , totalMem i i tillegg er det 
     heller ikke mulig å hente ut noe session infor fra boksene.

     Vi har prøvd å kompilere opp ny mib.bin og legge til hostmib.dll som en extensionagent
     i registry uten hell.

     Det er imildertid mulig å hente ut noe nyttig info fra NT boksene følgende OID'er må da 
     brukes:
     cpu        :  1.3.6.1.4.1.311.1.1.3.1.1.2.1.3.1.0
     Interface  :  1.3.6.1.2.1.2.2.1.2
     (disse to er som beskrevet i Defaults fila)
     Used Memory: 1.3.6.1.4.1.311.1.1.3.1.1.1.3.0
     Free Memory: 1.3.6.1.4.1.311.1.1.3.1.1.1.2.0
     Disk har vi ikke fått til å hente ut.

  ii) interface på win2k
     Når cricket spør etter win2k sine interface med oid'en ifDescription 1.3.6.1.2.1.2.2.1.2
     så kommer svaret tilbake som:
     interfaces.ifTable.ifEntry.ifDescr.1 = MS TCP Loopback interface
     interfaces.ifTable.ifEntry.ifDescr.2 = Intel 8255x-based Integrated Fast Ethernet

     Dette vises ok men i all hemmeliget legger Windows ved en hex-NULL på slutten av begge 
     disse strengene som ikke vises. Denne må siles ut slik at det ikke
     blir tull i konfig-filene til cricket. Derfor er det gjort et lite
     hack på cricket sin Map.pm slik at vi kan hente ut interface på
     win2k også.  
     
     Den nye Map.pm ligger i cvsroot /cricket/bin og må byttes ut med
     cricket sin orignale Map.pm. Alternativt kan kommandoen patch -p0 <
     cricket.patch kjøres som også ligger i cvsroot /cricket/bin.

 iii) NFS og snmp
     På *nix boksene stopper snmpd opp (dør hen) dersom maskinen som det kjøres spørring 
     mot har en NFS avhengighet mot en annen boks som er nede.
     Eksempel :
     snmpwalk kamel <community> .1.3.6.1.2.1.25.2.3.1.3
     ......
     host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.11 = /unit
     host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.12 = /vol
     host.hrStorage.hrStorageTable.hrStorageEntry.hrStorageDescr.13 = /cdrom/sunray12
     Timeout: No Response from kamel
     her er nummer 14 en NFS avhengighet mot en annen maskin. Denne NFS'en har dødd 
     dermed, henger snmpd en viss stund før den timer ut. Merk at ingen
     SNMP-forespørsler mot denne serveren virker mens den er opptatt av
     å time ut.

     Vi har ikke klart å finne noe fornuftig løsning på problemet , snmpd inneholder
     c-kode som er forsøkt tydet men ingen løsning funnet.

 iv) net-snmpd i Solaris vs Linux
     Det viser seg at net-snmp oppfører seg litt forskjellig på de to
     os'ene.

     Vi klarte ikke å hente ut OID ssCpuRawNice 1.3.6.1.4.1.2021.11.51 på 
     Solaris, men dette fungerte bra på Linux. En annen mib, ssCpuSystem 
     1.3.6.1.4.1.2021.11.10 (current percentages of system CPU time) fungerte bra 
     på Solaris men ikke på Linux. Det som skjer på Linux er at man får
     prosenter for hele oppetiden, ikke for 'nå'. Dvs. at hvis man for
     en måned siden hadde tunge beregninger kjørende er fortsatt
     CPU-prosenten ganske høy fordi det totalt er brukt mye mer tid på
     utregning enn stillstand. Løsningen for Cricket sin del er å bruke
     ssCpuRawSystem osv. med DERIVE som datatype, da får man informasjon
     om de siste bevegelsene.
     
     Det er kun disse to forskjellene vi har funnet så langt.

8) Vyer
   * hente info fra salmaskiner
     (snitt innloggingstid)
   * hent ut mer kul snmp info 
     (info ifra webkonsentrator LVS, mer om e-post, disk-IO på filtjenere,
     raid-statistikk, domenekontrollere)
   * nytt grensesnitt (python-tingen?)
     Mulighet for sammensatt statistikk, f.eks. lage en graf som
     sammenlikner antall e-post inn, trafikk på svitsjeport og 
     lasten på filtjeneren.
     Redusere antall musklikk.
     Vi har laget en prototyp i Python som kan noe slik pr. idag. 
     (cvs-addresse)
     Gruppering av servere (utvidet bruk av bokskategori-tabellen i 
     webvisning, f.eks. gruppere alle terminaltjenere sammen)
   * konfigurasjon i database, ikke filer, konfigurasjon fra web
     (enklere for NT-admins på høyskoler)
   * tilgangskontroll  
   * Ny parallellisert innsamler
   
