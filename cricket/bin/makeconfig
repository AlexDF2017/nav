#!/usr/bin/perl -w
############################################################
# Script som lager alle target-filene som Cricket bruker
# ved innsamling av data.
#
# Poenget med scriptet er at det ikke skal bruke SNMP 
# for å spørre enhetene om info, da dette fører til timeout på
# enheter som er nede, og dermed fører til mangelfull innsamling
# av data for Cricket.
#
# Skrevet av:
# John Magne Bredal
# 08-09-2000
#
# Sist forandret (major bug...!) 27-10-2000 - JM
#
# Oppdatert 23-01-2001 - JM
# Bruker nå nye navn på tabellene i databasen
#
# Oppdatert 26-01-2001 - JM
# Fikset minor bug der det ikke ble sjekket om community faktisk
# fantes før routeren ble slengt inn i arrayet. Laget stort sett
# bare uviktige feilmeldinger.
############################################################

use Pg;
use strict;

my $path = "/home/cricket/cricket-config";
my $default = "/home/cricket/cricket/cricket-config_defaults";

my @ruterliste;
my @switchliste;

my $dbh = &db_connect("manage", "manage", "eganam");

# Sletter alt for å forhindre at det blir liggende feil igjen fra
# forrige oppdatering.

print "Sletter tidligere config-filer\n";
`rm -R $path/router-interfaces/*`;
`rm -R $path/switch-ports/*`;
`rm -R $path/giga-router-interfaces/*`;
`rm -R $path/giga-switch-ports/*`;
`rm -R $path/switches/*`;
`rm -R $path/routers/*`;

print "Kopierer over default verdier\n";
`cp -R $default/* $path`;

print "Skriver routere\n";
&Routers;
print "OK!\n";

print "Skriver ruter-interfaces\n";
&Routerinterfaces;
print "OK!\n";

print "Skriver switcher\n";
&Switches;
print "OK!\n";

print "Skriver switcheporter\n";
&Switchports;
print "OK!\n";

print "Skriver gigarouterinterfaces\n";
&gigarouterinterfaces;
print "OK!\n";

print "Skriver gigaswitchports\n";
&gigaswitchports;
print "OK!\n";

print "Kompilerer nytt config-tre\n";
system("/home/cricket/cricket/cricket/compile");

print "Ferdig!\n";


########################################
# Henter info om ruterne
########################################
sub Routers {

    my $fil = "$path/routers/Targets";

    # Henter alle ruterne fra databasen
    my $sporring = "SELECT boksid,sysname,ip,type,romid,ro FROM boks WHERE kat='GW' ORDER BY sysname";
    my $getrouters = &db_select($sporring,$dbh);

    # Skriver til filen
    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
    while (my @temp = $getrouters->fetchrow) {
	@temp = map &rydd($_), @temp;
	my ($id, $sysname,$ip,$type,$romid,$community) = @temp;
	
	# Unngår hvis det er feil i databasen
	if ($sysname) {
	    $sysname =~ s/\..+//;

	    # Hardkoding av unntak....
	    if ($sysname =~ /(erke-gw|psykiatri-gw|ringve-gw)/) {
		$sysname = "$sysname-trlos";
	    }

	    if ($community) {
		push @ruterliste, [$id, $sysname, $ip, $romid,$community];
		print FIL "target $sysname\n";
		print FIL "\tsnmp-host\t=\t$ip\n";
		print FIL "\tsnmp-community\t=\t$community\n";

		# Unntak for type ruter
		if ($type =~ /^(IGS|AGS|C2514|C4000|C4700|C1005|C7200|C7500)$/ ) {
		    print FIL "\ttarget-type\t=\t$type-Router\n";
		} else {
		    print FIL "\ttarget-type\t=\tStandard-Router\n";
		}

		# Må finne beskrivelsen til rommet
		$sporring = "SELECT descr FROM rom WHERE id='$romid'";
		my $getdesc = &db_select($sporring,$dbh);
		if (!(my $desc = $getdesc->fetchrow)) {
		    print "Ingen beskrivelse for rom med id=$romid\n";
		    print FIL "\tshort-desc\t=\t\"\"\n\n";
		} else {
		    $desc = &rydd($desc);
		    print FIL "\tshort-desc\t=\t\"$desc\"\n\n";
		}
	    }
	}
    }

    close FIL;

} # sub Routers

########################################
# Henter info om interfaces, bruker
# ruterlista.
########################################
sub Routerinterfaces {

    my $count = 0;
    for (@ruterliste) {
        my %routerint = ();

	my ($ruterid, $sysname, $ip, $romid, $community) = @$_;

	unless (-e "$path/router-interfaces/$sysname") {
	    mkdir ("$path/router-interfaces/$sysname",0775);
	}

	my $fil = "$path/router-interfaces/$sysname/interfaces";
	open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
	print FIL "target --default--\n";
	print FIL "\trouter = $ip\n";
	print FIL "\tsnmp-community =\t$community\n";

	# Må finne alle interfacene til ruteren
	my $sporring = "SELECT interf,speed,nettype,org,anv,samband,komm FROM prefiks p,gwport g WHERE g.boksid=$ruterid AND g.prefiksid=p.prefiksid AND speed!=1000 ORDER BY vlan";

	my $getinterfaces = &db_select($sporring,$dbh);

	while (my @temp = $getinterfaces->fetchrow) {
	    @temp = map &rydd($_), @temp;
	    my ($interf,$speed,$type,$org,$anv,$samband,$komm) = @temp;
	    unless ($routerint{$interf}) {
		$routerint{$interf}++;
		# Vil ikke ha med Loopback-interfacene.
		unless ($interf =~ /Loopback/) {
		    $interf =~ s/\//_/g;
		    print FIL "\ntarget $interf\n";
		    $interf =~ s/_/\//g;
		    print FIL "\tinterface-name\t=\t$interf\n";

		    # Må sette sammen en description
		    my @elementer = ($org, $anv, $samband, $komm);
		    unless ($sysname =~ /trlos/) {
			$sysname =~ s/-gw//;
		    } else {
			$sysname =~ s/-gw-trlos//;
		    }
		    
		    print FIL "\tshort-desc\t=\t$type,$sysname";

		    for (@elementer) {
			if ($_) {
			    print FIL ",$_";
			}
		    }
		    print FIL "\n";

		    # Setter slik at alle capacities har .00 etter seg
		    if ($speed =~ /\./) {
			print FIL "\tcapacity\t=\t$speed\n";
		    } else {
			print FIL "\tcapacity\t=\t$speed.00\n";
		    }
		}
	    }
	}
	$count++;
	close FIL;
    }
    print "$count filer laget\n"    

} # sub Routerinterfaces

########################################
# Henter info om alle svitsjene.
# Tar hensyn til at det brukes både
# svitsjer og rutere...
########################################
sub Switches {

    my $fil = "$path/switches/switches";

    my $sporring = "SELECT boksid, ip, sysName,type,ro FROM boks WHERE kat='SW' ORDER BY sysName";
    my $getswitches = &db_select($sporring,$dbh);

    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
    while (my @temp = $getswitches->fetchrow) {
	@temp = map &rydd($_),@temp;
	my ($id,$ip,$sysname, $type, $community) = @temp;
	# Unngår feil i databasen
	if ($sysname) {
	    $sysname =~ s/\..+//;
	    # Hardkoder unntak for rene svitsjer (SW1100|SW3300|SW9300)
	    if ($type) {
		unless ($type =~ /(SW|C3000|C3100)/) {
		    push @switchliste, [$id, $ip, $sysname, $type, $community];
		    
		    if ($community) {
			print FIL "target $sysname\n";
			print FIL "\tsnmp-community\t=\t$community\n";
			print FIL "\ttarget-type\t=\t$type\n";
		    }
		}
	    }
	}
    }
    close FIL;

} # sub Switches


########################################
# Henter info om svitsjeportene.
# Kan bruke ntnulistports for å hente
# info vha. snmp.
########################################
sub Switchports {

    my $count = 0;
    for (@switchliste) {
	my ($id, $ip, $switchnavn, $type, $community) = @$_;

	if ($community) {
	    # Finner alle portene som er på switchen.
	    my $sporring = "SELECT modul,port,portnavn FROM swport WHERE boksid=$id and speed!=1000 and portnavn!='' ORDER BY swportid";
	    my $getports = &db_select($sporring,$dbh);
	    my $antall = $getports->ntuples;

	    # Hvis ingenting returneres skal vi ikke gjøre noe.
            unless ($antall == 0) {
                unless (-e "$path/switch-ports/$switchnavn") {
                    mkdir ("$path/switch-ports/$switchnavn", 0775);
                }
		
		my $fil = "$path/switch-ports/$switchnavn/ports";

		open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
		print FIL "target --default--\n";
		print FIL "\tswitch\t\t=\t$ip\n";

		print FIL "\tsnmp-community\t=\t$community\n\n";

		my @liste;
		
		while (my @temp = $getports->fetchrow) {
		    @temp = map &rydd($_), @temp;
		    my ($modul,$port,$portname) = @temp;
		    unless (!$modul or !$port) {
			push @liste, [@temp];
		    }
		}

		# Order holder styr på rekkefølgen som Cricket
		# viser portene i. Høyt tall = høy prioritet.
		my $order = @liste;

		for my $ref (@liste) {
		    my ($modul, $port, $portname) = @$ref;
		    $modul =~ s/fe/Fa/i;
		    $modul =~ s/ge/Gi/i;
		    print FIL "target ".$modul."_".$port."\n";
		    print FIL "\tport-name\t=\t".$modul."/".$port."\n";
		    $portname =~ s/\s/_/g;
		    print FIL "\tshort-desc\t=\t$portname\n";

		    $order--;
		    print FIL "\torder\t\t=\t$order\n\n";
		}
		$count++;
		close FIL;
	    }
	}
    }
    print "$count filer laget\n"

} # sub Switchports

sub gigarouterinterfaces {

    my $count = 0;
    # Henter alle interfaces som har giga-kapasitet.
    my $sporring = "SELECT b.ip,b.sysname,p.org,p.anv,p.samband,p.komm,g.interf,g.speed,p.nettype,b.ro FROM boks b,gwport g,prefiks p WHERE g.speed='1000' and g.prefiksid=p.prefiksid and g.boksid=b.boksid";
    my $getinterfaces = &db_select($sporring,$dbh);

    while (my @temp = $getinterfaces->fetchrow) {
	@temp = map &rydd($_), @temp;
	my($ip,$sysname,$org,$anv,$samband,$komm,$interf,$speed,$type,$community) = @temp;

	$sysname =~ s/\..+//;

	unless (-e "$path/giga-router-interfaces/$sysname") {
	    mkdir ("$path/giga-router-interfaces/$sysname",0775);
	}

	my $fil = "$path/giga-router-interfaces/$sysname/interfaces";
	if (-e "$path/giga-router-interfaces/$sysname/interfaces") {
	    open (FIL, ">>$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
	} else {
	    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
	    print FIL "target --default--\n";
	    print FIL "\trouter = $ip\n";
	    print FIL "\tsnmp-community =\t$community\n";
	}

	$interf =~ s/\//_/g;
	print FIL "\ntarget $interf\n";
	$interf =~ s/_/\//g;
	print FIL "\tinterface-name\t=\t$interf\n";

	# Må sette sammen en description
	my @elementer = ($org, $anv, $samband, $komm);
	unless ($sysname =~ /trlos/) {
	    $sysname =~ s/-gw//;
	} else {
	    $sysname =~ s/-gw-trlos//;
	}
		    
	print FIL "\tshort-desc\t=\t$type,$sysname";
	
	for (@elementer) {
	    if ($_) {
		print FIL ",$_";
	    }
	}
	print FIL "\n";

	# Setter slik at alle capacities har .00 etter seg
	if ($speed =~ /\./) {
	    print FIL "\tcapacity\t=\t$speed\n";
	} else {
	    print FIL "\tcapacity\t=\t$speed.00\n";
	}
	$count++;
    }

    close FIL;
    print "$count filer laget\n"

} # sub gigainterfaces

sub gigaswitchports {

    my %test;
    my $count = 0;

    my $sporring = "select b.boksid,b.ip,b.sysname,b.type,s.modul,s.port,s.portnavn,b.ro from swport s,boks b where b.boksid=s.boksid and s.speed='1000' and portnavn!='' order by b.boksid";
    my $getports = &db_select($sporring,$dbh);

    while (my @temp = $getports->fetchrow) {
	@temp = map &rydd($_), @temp;
	my($id,$ip,$switchnavn,$type,$modul,$port,$portname,$community) = @temp;

	unless ($type =~ /SW\d{4}/ ) {
	    unless ($portname =~ /(udef|undef)/ or !$modul or !$port) {
		$test{$id}++;

		if ($community) {
		    unless (-e "$path/giga-switch-ports/$switchnavn") {
			mkdir ("$path/giga-switch-ports/$switchnavn", 0775);
		    }

		    my $fil = "$path/giga-switch-ports/$switchnavn/ports";

		    if (-e "$path/giga-switch-ports/$switchnavn/ports") {
			open (FIL, ">>$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
		    } else {
			open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
			print FIL "target --default--\n";
			print FIL "\tswitch\t\t=\t$ip\n";
			print FIL "\tsnmp-community\t=\t$community\n\n";
		    }

		    $modul =~ s/fe/Fa/i;
		    $modul =~ s/ge/Gi/i;
		    print FIL "target ".$modul."_".$port."\n";
		    print FIL "\tport-name\t=\t$modul\/$port\n";
		    $portname =~ s/\s/_/g;
		    print FIL "\tshort-desc\t=\t$portname\n";
		    my $order = $test{$id};
		    print FIL "\torder\t\t=\t$order\n\n";		

		    close FIL;

		    $count++;
		}
	    }
	}
    }
    print "$count filer laget\n"
}

sub db_connect {
    my $db = $_[0];
    my $user = $_[1];
    my $pass = $_[2];
    my $conn = Pg::connectdb("dbname=$db user=$user password=$pass");
    die $conn->errorMessage unless PGRES_CONNECTION_OK eq $conn->status;
    return $conn;
}

sub db_select {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_TUPLES_OK);
    return $resultat;
}

sub db_execute {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_COMMAND_OK);
#die er byttet med print

    return $resultat;
}

sub rydd {
    if (defined $_[0]) {
        $_ = $_[0];
        s/\s*$//;
        s/^\s*//;
    return $_;
    } else {
        return "";
    }
}
