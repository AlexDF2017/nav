#!/usr/bin/perl -w
############################################################
# Script som lager alle target-filene som Cricket bruker
# ved innsamling av data.
#
# Poenget med scriptet er at det ikke skal bruke SNMP 
# for å spørre enhetene om info, da dette fører til timeout på
# enheter som er nede, og dermed fører til mangelfull innsamling
# av data for Cricket.
#
# Skrevet av:
# John Magne Bredal
# 08-09-2000
#
# Utallige forandringer gjennomført.
############################################################

use Pg;
use strict;

my $path = "/home/cricket/cricket-config";
my $default = "/home/cricket/cricket/cricket-config_defaults";

my @ruterliste;
my @switchliste;

my $dbh = &db_connect("manage", "manage", "eganam");

# Sletter alt for å forhindre at det blir liggende feil igjen fra
# forrige oppdatering.

print "Sletter tidligere config-filer\n";
`rm -R $path/router-interfaces/*`;
`rm -R $path/switch-ports/*`;
`rm -R $path/giga-router-interfaces/*`;
`rm -R $path/giga-switch-ports/*`;
`rm -R $path/switches/*`;
`rm -R $path/routers/*`;

print "Kopierer over default verdier\n";
`cp -R $default/* $path`;

print "Skriver routere\n";
&Routers;
print "OK!\n";

print "Skriver ruter-interfaces\n";
&Routerinterfaces;
print "OK!\n";

print "Skriver switcher\n";
&Switches;
print "OK!\n";

print "Skriver switcheporter\n";
&Switchports;
print "OK!\n";

print "Skriver gigarouterinterfaces\n";
&gigarouterinterfaces;
print "OK!\n";

print "Skriver gigaswitchports\n";
&gigaswitchports;
print "OK!\n";

print "Kompilerer nytt config-tre\n";
system("/home/cricket/cricket/cricket/compile");

print "Ferdig!\n";


########################################
# Henter info om ruterne
########################################
sub Routers {

    my $fil = "$path/routers/Targets";

    # Henter typegrupper fra type
    my %typegruppe;
    my $sporring = "select typeid,typegruppe from type";
    my $getres = &db_select($sporring,$dbh);
    while (my($typeid,$typegruppe) = $getres->fetchrow) {
	$typegruppe{$typeid} = $typegruppe;
    }

    # Henter alle ruterne fra databasen
    $sporring = "SELECT boksid,sysname,ip,typeid,romid,ro FROM boks WHERE kat='GW' ORDER BY sysname";
    my $getrouters = &db_select($sporring,$dbh);

    # Skriver til filen
    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
    while (my @temp = $getrouters->fetchrow) {
	my ($id, $sysname,$ip,$type,$romid,$community) = @temp;
	
	# Unngår hvis det er feil i databasen
	if ($sysname) {
#	    $sysname =~ s/\..+//;

	    if ($community) {
		push @ruterliste, [$id, $sysname, $ip, $romid,$community];
		print FIL "target $sysname\n";
		print FIL "\tsnmp-host\t=\t$ip\n";
		print FIL "\tsnmp-community\t=\t$community\n";
		print FIL "\ttarget-type\t=\t$typegruppe{$type}\n";

#  		# Unntak for type ruter
#  		if ($type =~ /^(IGS|AGS|C2514|C4000|C4700|C1005|C7200|C7500)$/ ) {
#  		    print FIL "\ttarget-type\t=\t$type-Router\n";
#  		} else {
#  		    print FIL "\ttarget-type\t=\tStandard-Router\n";
#  		}

		# Må finne beskrivelsen til rommet
		$sporring = "SELECT descr FROM rom WHERE romid='$romid'";
		my $getdesc = &db_select($sporring,$dbh);
		if (!(my $desc = $getdesc->fetchrow)) {
		    print "Ingen beskrivelse for rom med id=$romid\n";
		    print FIL "\tshort-desc\t=\t\"\"\n\n";
		} else {
		    print FIL "\tshort-desc\t=\t\"$desc\"\n\n";
		}
	    }
	}
    }

    close FIL;

} # sub Routers

########################################
# Henter info om interfaces, bruker
# ruterlista.
########################################
sub Routerinterfaces {

    my $count = 0;
    for (@ruterliste) {
        my %routerint = ();

	my ($ruterid, $sysname, $ip, $romid, $community) = @$_;

	unless (-e "$path/router-interfaces/$sysname") {
	    mkdir ("$path/router-interfaces/$sysname",0775);
	}

	my $fil = "$path/router-interfaces/$sysname/interfaces";
	open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
	print FIL "target --default--\n";
	print FIL "\trouter = $ip\n";
	print FIL "\tsnmp-community =\t$community\n";

	# Må finne alle interfacene til ruteren
	my $sporring = "SELECT g.interf,g.speed,p.nettype,p.nettident FROM prefiks p,gwport g WHERE g.boksid=$ruterid AND g.prefiksid=p.prefiksid AND speed!=1000 and g.masterindex is null ORDER BY vlan";

	my $getinterfaces = &db_select($sporring,$dbh);
	
	my @liste;
	my ($interf,$speed,$type,$nettident);
	while (($interf,$speed,$type,$nettident) = $getinterfaces->fetchrow) {
	    unless ($routerint{$interf}) {
		$routerint{$interf}++;
		# Vil ikke ha med Loopback-interfacene.
		unless ($interf =~ /Loopback/) {
		    push @liste, [$interf,$speed,$type,$nettident];
		}
	    }
	}

	@liste = &sorter(0, @liste);
	my $order = @liste;

	for (@liste) {
	    ($interf,$speed,$type,$nettident) = @$_;
	    $interf =~ s/\//_/g;
	    print FIL "\ntarget $interf\n";
	    $interf =~ s/_/\//g;
	    print FIL "\tinterface-name\t=\t$interf\n";

	    print FIL "\tshort-desc\t=\t$nettident\n";

	    # Setter slik at alle capacities har .00 etter seg
	    if ($speed =~ /\./) {
		print FIL "\tcapacity\t=\t$speed\n";
	    } else {
		print FIL "\tcapacity\t=\t$speed.00\n";
	    }
	    $order--;
	    print FIL "\torder\t\t=\t$order\n\n";
	}

	$count++;
	close FIL;
    }
    print "$count filer laget\n"    

} # sub Routerinterfaces

########################################
# Henter info om alle svitsjene.
# Tar hensyn til at det brukes både
# svitsjer og rutere...
########################################
sub Switches {

    my $fil = "$path/switches/switches";

    # Henter typegrupper fra type
    my %typegruppe;
    my $sporring = "select typeid,typegruppe from type";
    my $getres = &db_select($sporring,$dbh);
    while (my($typeid,$typegruppe) = $getres->fetchrow) {
	$typegruppe{$typeid} = $typegruppe;
    }

    $sporring = "SELECT boksid, ip, sysName,typeid,ro FROM boks WHERE kat='SW' ORDER BY sysName";
    my $getswitches = &db_select($sporring,$dbh);

    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
    while (my @temp = $getswitches->fetchrow) {
	my ($id,$ip,$sysname, $type, $community) = @temp;
	# Unngår feil i databasen
	if ($sysname) {
#	    $sysname =~ s/\..+//;
	    # Hardkoder unntak for rene svitsjer (SW1100|SW3300|SW9300)
	    if ($type) {
		unless ($type =~ /(SW|C3000|C3100)/) {
		    push @switchliste, [$id, $ip, $sysname, $type, $community];
		    
		    if ($community) {
			print FIL "target $sysname\n";
			print FIL "\tsnmp-community\t=\t$community\n";
			print FIL "\ttarget-type\t=\t$typegruppe{$type}\n\n";
#			print FIL "\ttarget-type\t=\t$type\n";
		    }
		}
	    }
	}
    }
    close FIL;

} # sub Switches


########################################
# Henter info om svitsjeportene.
# Kan bruke ntnulistports for å hente
# info vha. snmp.
########################################
sub Switchports {

    my $count = 0;
    for (@switchliste) {
	my ($id, $ip, $switchnavn, $type, $community) = @$_;

	if ($community) {
	    # Finner alle portene som er på switchen.
	    my $sporring = "SELECT modul,port,portnavn FROM swport WHERE boksid=$id and speed!=1000 and portnavn!='' ORDER BY swportid";
	    my $getports = &db_select($sporring,$dbh);
	    my $antall = $getports->ntuples;

	    # Hvis ingenting returneres skal vi ikke gjøre noe.
            unless ($antall == 0) {
                unless (-e "$path/switch-ports/$switchnavn") {
                    mkdir ("$path/switch-ports/$switchnavn", 0775);
                }
		
		my $fil = "$path/switch-ports/$switchnavn/ports";

		open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
		print FIL "target --default--\n";
		print FIL "\tswitch\t\t=\t$ip\n";

		print FIL "\tsnmp-community\t=\t$community\n\n";

		my @liste;
		
		while (my @temp = $getports->fetchrow) {
		    my ($modul,$port,$portname) = @temp;
		    unless (!$modul or !$port) {
			$port = $modul."_".$port;
			push @liste, [$port,$portname];
		    }
		}

		@liste = &sorter(0,@liste);

		# Order holder styr på rekkefølgen som Cricket
		# viser portene i. Høyt tall = høy prioritet.
		my $order = @liste;
		
		for my $ref (@liste) {
		    my ($port, $portname) = @$ref;
		    $port =~ s/fe/Fa/i;
		    $port =~ s/ge/Gi/i;
		    print FIL "target $port\n";
		    $port =~ s/_/\//;
		    print FIL "\tport-name\t=\t$port\n";
		    $portname =~ s/\s/_/g;
		    print FIL "\tshort-desc\t=\t$portname\n";

		    $order--;
		    print FIL "\torder\t\t=\t$order\n\n";
		}
		$count++;
		close FIL;
	    }
	}
    }
    print "$count filer laget\n"

} # sub Switchports

sub gigarouterinterfaces {

    my $count = 0;
    # Henter alle interfaces som har giga-kapasitet.
    my $sporring = "SELECT b.ip,b.sysname,g.interf,p.nettident,g.speed,p.nettype,b.ro FROM boks b,gwport g,prefiks p WHERE g.speed='1000' and g.prefiksid=p.prefiksid and g.boksid=b.boksid and g.masterindex is null";
    my $getinterfaces = &db_select($sporring,$dbh);
    
    my $tempip = "0";
    my @liste;
    my @liste_bak;
    my($ip,$sysname,$interf,$nettident,$speed,$type,$community);
    while (($ip,$sysname,$interf,$nettident,$speed,$type,$community) = $getinterfaces->fetchrow) {
#	$sysname =~ s/\..+//;

	if ($ip eq $tempip || $tempip eq "0") {
	    push @liste_bak, [$ip,$sysname,$interf,$nettident,$speed,$type,$community];
	    $tempip = $ip;
	} else {
	    @liste = @liste_bak;
	    @liste_bak = ();
	    push @liste_bak, [$ip,$sysname,$interf,$nettident,$speed,$type,$community];
	    $tempip = $ip;
	    @liste = &sorter (6,@liste);
	    my $order = @liste;

	    for (@liste) {
		($ip,$sysname,$interf,$nettident,$speed,$type,$community) = @$_;

		unless (-e "$path/giga-router-interfaces/$sysname") {
		    mkdir ("$path/giga-router-interfaces/$sysname",0775);
		}

		my $fil = "$path/giga-router-interfaces/$sysname/interfaces";
		if (-e "$path/giga-router-interfaces/$sysname/interfaces") {
		    open (FIL, ">>$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
		} else {
		    open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
		    print FIL "target --default--\n";
		    print FIL "\trouter = $ip\n";
		    print FIL "\tsnmp-community =\t$community\n";
		}

		$interf =~ s/\//_/g;
		print FIL "\ntarget $interf\n";
		$interf =~ s/_/\//g;
		print FIL "\tinterface-name\t=\t$interf\n";
		print FIL "\tshort-desc\t=\t$nettident";
		
		# Setter slik at alle capacities har .00 etter seg
		if ($speed =~ /\./) {
		    print FIL "\tcapacity\t=\t$speed\n";
		} else {
		    print FIL "\tcapacity\t=\t$speed.00\n";
		}

		# Setter sorteringsinfo
		print FIL "\torder\t\t=\t$order\n\n";
		$order--;
	    }
	    close FIL;
	    $count++;
	}
    }
    print "$count filer laget\n"

} # sub gigainterfaces

sub gigaswitchports {

    my %test;
    my $count = 0;

    my $sporring = "select b.boksid,b.ip,b.sysname,b.typeid,s.modul,s.port,s.portnavn,b.ro from swport s,boks b where b.boksid=s.boksid and s.speed='1000' and portnavn!='' order by b.boksid";
    my $getports = &db_select($sporring,$dbh);

    my $tempswitchnavn = "";
    my @liste;
    my @liste_bak;
    my ($id,$ip,$switchnavn,$type,$modul,$port,$portname,$community);
    while (($id,$ip,$switchnavn,$type,$modul,$port,$portname,$community) = $getports->fetchrow) {
#	$switchnavn =~ s/\..+//;
	$port = $modul."_".$port;
	if ($switchnavn eq $tempswitchnavn || $tempswitchnavn eq "") {
	    push @liste_bak, [$id,$ip,$switchnavn,$type,$port,$portname,$community];
	    $tempswitchnavn = $switchnavn;
	} else {
	    @liste = @liste_bak;
	    @liste_bak = ();
	    push @liste_bak, [$id,$ip,$switchnavn,$type,$port,$portname,$community];

	    $tempswitchnavn = $switchnavn;
	    @liste = &sorter(4,@liste);
	    my $order = @liste;

	    for (@liste) {
		($id,$ip,$switchnavn,$type,$port,$portname,$community) = @$_;
		unless ($type =~ /SW\d{4}/ ) {
		    unless ($portname =~ /(udef|undef)/ or !$port) {
			$test{$id}++;

			if ($community) {
			    unless (-e "$path/giga-switch-ports/$switchnavn") {
				mkdir ("$path/giga-switch-ports/$switchnavn", 0775);
			    }
			    
			    my $fil = "$path/giga-switch-ports/$switchnavn/ports";
			    
			    if (-e "$path/giga-switch-ports/$switchnavn/ports") {
				open (FIL, ">>$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
			    } else {
				open (FIL, ">$fil") or die "Kunne ikke åpne $fil for skriving $!\n";
				print FIL "target --default--\n";
				print FIL "\tswitch\t\t=\t$ip\n";
				print FIL "\tsnmp-community\t=\t$community\n\n";
			    }
			    
			    $modul =~ s/fe/Fa/i;
			    $modul =~ s/ge/Gi/i;
			    print FIL "target $port\n";
			    $port =~ s/_/\//;
			    print FIL "\tport-name\t=\t$port\n";
			    $portname =~ s/\s/_/g;
			    print FIL "\tshort-desc\t=\t$portname\n";
			    print FIL "\torder\t\t=\t$order\n\n";		
			    $order--;
			    close FIL;
			}
		    }
		}
	    }
	    $count++;
	}
    }
    print "$count filer laget\n"
}

sub db_connect {
    my $db = $_[0];
    my $user = $_[1];
    my $pass = $_[2];
    my $conn = Pg::connectdb("dbname=$db user=$user password=$pass");
    die $conn->errorMessage unless PGRES_CONNECTION_OK eq $conn->status;
    return $conn;
}

sub db_select {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_TUPLES_OK);
    return $resultat;
}

sub db_execute {
    my $sql = $_[0];
    my $conn = $_[1];
    my $resultat = $conn->exec($sql);
    print "DATABASEFEIL: $sql\n".$conn->errorMessage
        unless ($resultat->resultStatus eq PGRES_COMMAND_OK);
#die er byttet med print

    return $resultat;
}

sub sorter {

    my $indeks = shift;
    my @array = @_;
    my %temp;

    #print "\n---------- Ny enhet ----------\n";

    for (@array) {
	my $key = @$_[$indeks];
	#print "$key ";
	# Hiver inn en null hvis bare et tall
	if ($key =~ /_\d{1}/ && $key !~ /_\d{2}/) {
	    $key =~ s/_(\d)\D/\.0$1/g;
	}

	# Fjerner alle ikke-tall
	$key =~ s/\D+//g;
	$temp{$key} = [@$_];
    }
    
    #print "\nSorterer...\n";

    my @res = sort numerically keys %temp;
    my @ret;
    for (@res) {
	#print "$_ ";
	#print "@{$temp{$_}}\n";
	push @ret, [@{$temp{$_}}];
    }

    return @ret;

}

sub numerically {
    $a <=> $b;
}
